#--------------------------------------------------------------------------------------------------------
INTRODUCTION + RELATIONAL DATABASES
#--------------------------------------------------------------------------------------------------------
DBMS(database management system):
  - efficient: high performance, thousands of queries+updates/sec
  - reliable: high uptime
  - convenient: physical data independence -> how data is physically stored not affect how it's structured. DECLARATIVE high-level language -> user can query with simple language and system finds algorithms to get data efficiently
  - safe: guarantee that the data won't be lost or overwritten by HW/SW failures, user error, power outage, etc
  - multi-user: allow multiple users access to same data (concurrency control) NOT by locking data while someone is using it because inefficient
  - massive: TB of data
  - persistent data: data outlives program

Database applications often programmed with frameworks:
  environment that helps develop program
  ex: Django, Ruby on Rails

Middleware:
  helps applications interact with database systems
  ex: application servers, web servers
  
Data model:
  description of how the data is structured.
  ex: relational data model. relation = table, Set of records, xml, graph

Schema vs data
  schema = types, structure of the data
  data = actual varaibles or data points
  
Data definition language(DDL)
  set up schema
  
Data manipulation language/ query language (DML)
  querying/modifying language
  
DBMS implementer - build system
Database designer - establish schema
Database application developer - programs that operate on the data
Database administrator - load data, keep running smoothly 

#--------------------------------------------------------------------------------------------------------
RELATIONAL MODEL
#--------------------------------------------------------------------------------------------------------
