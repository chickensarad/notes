#--------------------------------------------------------------------------------------------------------
INTRODUCTION TO SQL
#--------------------------------------------------------------------------------------------------------
Standardized, interactive via GUI or prompt, or embedded in programs.
Declarative, based on relational algebra

Data Definition Language (DDL)
  # Create table ...
  # drop table ...
  
Data Manipulation Language (DML)
  # select ...
  # insert ...
  # delete ...
  # update ...

Othe commands
  indexes, constraints, views, triggers, transactions, aurhorization

Basic SELECT clause:
  # Select A1, A2, ..., An     # define what to return
  # From R1, R2, ..., Rm       # choose from these relations
  # Where conditions           # used to combine and filter

DEMO RELATIONS:
  College(cName, state, enrollment)    # cName is key
  Student(sID, sName, GPA, sizeHS)     # sID is key
  Apply(sID, cName, major, decision)   # {sID, cName, major} are key

#--------------------------------------------------------------------------------------------------------
BASIC SELECT STATEMENT
#--------------------------------------------------------------------------------------------------------
# select sID, sName, GPA   # condition is GPA but not necessary to include GPA
# from Student
# where GPA > 3.6;         # return a relation of sID, sName, and GPA of students whose GPA > 3.6

# select sName, major                #
# from Student, Apply                # from multiple relations
# where Student.sID = Apply.sID;     # join condition telling to combine Student relation with Apply relation (natural join). Must be explicitly stated
                                     # will return duplicates if any. To remove duplicate, use "select distinct sName, major" instead of "select sName, major"

# select distinct sName, major       # the "distinct only returns unique values
# from Student, Apply                # 
# where Student.sID = Apply.sID;     # 

# select sName, GPA, decision                                    # 
# from Student, Apply                                            # 
# where Student.sID = Apply.sID                                  # 
#   and sizeHS < 1000 and major = 'CS' and cname = 'Stanford';   #

# select cName                                 # returns an error because both College and Apply contain cName <- ambiguous
# from  College, Apply                         # must "select College.cName"
# whee College.cName = Apply.cName             #
#   and enrollment > 20000 and major = 'CS';   # 

# select Student.sID, sName, GPA, Apply.cName, enrollment          # combine all 3 relations
# from  Student, College, Apply                                    # unordered because SQL is unordered
# whee Apply.sID = Student.sID and Apply.cName = College.cName;    #

# select Student.sID, sName, GPA, Apply.cName, enrollment          # combine all 3 relations
# from  Student, College, Apply                                    # unordered because SQL is unordered
# whee Apply.sID = Student.sID and Apply.cName = College.cName     #
# order by GPA desc;                                               # order by GPA in descending. If not specified, ordered by ascending by default

# select Student.sID, sName, GPA, Apply.cName, enrollment          # combine all 3 relations
# from  Student, College, Apply                                    # unordered because SQL is unordered
# whee Apply.sID = Student.sID and Apply.cName = College.cName     #
# order by GPA desc, enrollment;                                   # order by GPA in descending then within it order by enrollment ascending

# select sID, major           #
# from Apply                  #
# where major like "%bio%";   # pattern matching, include all data with XXXmajorXXX. include "biology", "bioengineering", "marinebiology"

# select *                    # * gets all atributes of the relation
# from Apply                  #
# where major like "%bio%";   # 

# select *                    # get cross product, all possible combinations of Student and College
# from Student, College;      #

# select sID, sName, GPA, sizeHS, GPA*(sizeHS/1000.0)    # can add new attributes as function of other attributes. This would be a weighted GPA. 
# from Student;                                          #

# select sID, sName, GPA, sizeHS, GPA*(sizeHS/1000.0)    # can add new attributes as function of other attributes. This would be a weighted GPA. 
# from Student;                                          #

# select sID, sName, GPA, sizeHS, GPA*(sizeHS/1000.0) as scaledGPA   # renames new attribute
# from Student;                                                      #

#--------------------------------------------------------------------------------------------------------
TABLE VARIABLES AND SET OPERATORS
#--------------------------------------------------------------------------------------------------------
Table Variables serve 2 uses: 
  1. to make queries more readable
  2. rename relations that are used in the FROM clause, particularly when there are 2 instances of the same relation
  # Select A1, A2, ..., An     
  # From R1, R2, ..., Rm   <- R1, R2, ..., Rm are Table Variables.     
  # Where conditions           

Set operators:
  1. Union
  2. Intersect
  3. Except

Using table variables
  # select Student.sID, sName, GPA, Apply.cName, enrollment          # same as previously seen
  # from  Student, College, Apply                                    # 
  # whee Apply.sID = Student.sID and Apply.cName = College.cName;    # 
  
  # select S.sID, sName, GPA, A.cName, enrollment    # 
  # from  Student S, College C, Apply A              # achieves the same results. relations have been renamed for readability
  # whee A.sID = S.sID and A.cName = C.cName;        # 
  
  # select S1.sID, S1.sName, S1.GPA, S1.sID, S2.sName, S2.GPA    # returns all pairs of students who have the same GPA including pairs of same students
  # from  Student S1, Student S2                                 # 
  # whee S1.GPA = S2.GPA;                                        # 
  
  # select S1.sID, S1.sName, S1.GPA, S1.sID, S2.sName, S2.GPA    # 
  # from  Student S1, Student S2                                 # 
  # whee S1.GPA = S2.GPA and S1.sID <> S2.sID;                   # "S1.sID <> S2.sID" means S1.sID and S2.sID are different. This will still return 2 of the same pairs ex) "Amy and Bob" and "Bob and Amy"
  
  # select S1.sID, S1.sName, S1.GPA, S1.sID, S2.sName, S2.GPA    # 
  # from  Student S1, Student S2                                 # 
  # whee S1.GPA = S2.GPA and S1.sID < S2.sID;                    # Now only returns one of each unique pair

Using set operators
  Union operator
    # select cName from College   # retrurns all college names and student names in one attribute. cName came first so all data shown under attribute cName
    # union                       #
    # select sName from Student;  #
    
    # select cName as name from College   # all tuples go under attribnute "name" now
    # union                               #
    # select sName as name from Student;  #
    
    Union operator by default removes duplicates. SQLite removes duplicates by sorting results then removing duplicates
    # select cName as name from College   # 
    # union all                           # now shows duplicates. Also not sorted anymore since not going through sorting/removing duplicate
    # select sName as name from Student;  #

  Intersect operator
    # select sID from Apply where major = 'CS'    # ID of students who applied to both CS and EE
    # intersect                                   #
    # select sID from Apply where major = 'EE';   #
    
    some database systems have no intersect operator. Must write intersect as below
    # select A1.sID
    # from Apply A1, Apply A2
    # where A1.sID = A2.sID and A1.major = 'CS' and A2.major = 'EE';   # this returns all pairs. can use "select distinct" to remove duplicates
  
  Difference operator
    # select sID from Apply where major = 'CS'    # only ID of students who applied to CS and not EE
    # except                                      # 
    # select sID from Apply where major = 'EE';   # 
    
    some database systems also do not support except operator 
    # select distinct A1.sID                                            # this doesn't work because it actually finds pairs of students who applied to CS and also major other than EE. This cannot be done unless using another construct (not covered yet)
    # from Apply A1, Apply A2                                           # 
    # where A1.sID = A2.sID and A1.major = 'CS' and A2.major <> 'EE';   # 
    
#--------------------------------------------------------------------------------------------------------
SUBQUERIES IN WHERE CLAUSE
#--------------------------------------------------------------------------------------------------------
Subqueries are nested select statements

# select sID, sName                                          # shows ID and name of students from nested select
# from Student                                               #
# where sID in (select sID from Apply where major = 'CS');   # the nested select = ID of all students who applied to any CS program

# select distinct Student.sID, sName                # same as previous example
# from Student, Apply                               #
# where Student.sID = Apply.sID and major = 'CS';   #

# select sName                                               # shows ID of students who applied to any CS
# from Student                                               #
# where sID in (select sID from Apply where major = 'CS');   # 

# select distinct sName                             # similar but results with duplicate name but different sID are removed. Can remove data that should not have been removed
# from Student                                      #
# where Student.sID = Apply.sID and major = 'CS';   # 

# select sID, sName                                              # 
# from Student                                                   # 
# where sID in (select sID from Apply where major = 'CS')        # 
#   and sID not in (select sID from Apply where major = 'EE');   # shows students who applied to CS but not EE. Could not do the difference operator without except. Now it's possible.

* "sID not in (...)" and "not sID in (...)" have the same effect

Exists is used to test for existence of any record in a subquery
  # select cName, state                                                  # shows colleges with another college in the same state
  # from College C1                                                      #
  # where exists (select * from College C2                               # correlated reference: reference to C1 in subquery comes from outside of subquery
  #               where C2.state = C1.state and C1.cName <> C2.cName);   # without "C1.cName <> C2.cName" it returns all colleges because it returns self

Exist can be used to find max without using max
  # select cName                                              #
  # from College C1                                           #
  # where not exists (select * from College C2                #
  #                   where C2.enrollment > C1.enrollment);   # finds the college with enrollment with no larger enrollment
  
  Bad example of getting max because it finds everything except min
  # select S1.ssName, S1.GPA       
  # from Student S1, Student S2
  # where S1.GPA > S2.GPA;
  
  Using all. finds fromt Student records with GPA greater than or equal to ALL GPAs
  # select sName, GPA
  # from Student
  # where GPA >= all (select GPA from Student)

  incorrect use, will return nothing. Will return only if the highest GPA student is also unique GPA
  # select sName, GPA
  # from Student
  # where GPA > all (select GPA from Student S2
  #                  where S2.sID <> S1.sID);

  College name of college whose enrollment is greater than enrollment of all colleges whose name is different
  # select cName
  # from College C1
  # where enrollment > all (select enrollment from College C2
  #                         where C2.cName <> C1.cName);

  College name of college whose enrollment is greater than enrollment of all colleges whose name is different
  # select cName
  # from College C1
  # where not enrollment <= any (select enrollment from College C2
  #                              where C2.cName <> C1.cName);

some SQL/SQLite don't support any/anyall -> just need to use exists/not exists

#--------------------------------------------------------------------------------------------------------
SUBQUERIES IN FROM AND SELECT
#--------------------------------------------------------------------------------------------------------
# select sID, sName, GPA, GPA*(sizeHS/1000.0) as scaledGPA
# from Student
# where GPA*(sizeHS/1000.0) - GPA > 1.0
#       or GPA - GPA*(sizeHS/1000.0) > 1.0;                   # all students whose scaled GPA is 1.0 or adjusted by more than 1.0

# select sID, sName, GPA, GPA*(sizeHS/1000.0) as scaledGPA
# from Student
# where abs(GPA*(sizeHS/1000.0) - GPA) > 1.0;                 # same as above but quicker 

subquery in from clause
# select *                                                           
# from (select sID, sName, GPA, GPA*(sizeHS/1000.0) as scaledGPA     # this line creates a new relation including only certain attributes -> subquery in from clause
# from Student) G
# where abs(G.scaledGPA-GPA) > 1.0;                                  # also same as above

subquery in select clause
# select College.cName, state, GPA
# from College, Apply, Student
# where College.cName = Apply.cName
#    and Apply.sID = Student.sID
#    and GPA >= all
#        (select GPA from STudent, Apply
#         where Student.sID = Apply.sID
#           and Apply.cName = College.cName)


















#--------------------------------------------------------------------------------------------------------
THE JOIN FAMILY OF OPERATORS
#--------------------------------------------------------------------------------------------------------





#--------------------------------------------------------------------------------------------------------
AGGREGATION
#--------------------------------------------------------------------------------------------------------





#--------------------------------------------------------------------------------------------------------
NULL VARIABLES
#--------------------------------------------------------------------------------------------------------





#--------------------------------------------------------------------------------------------------------
DATA MODIFICATION STATEMENTS
#--------------------------------------------------------------------------------------------------------




